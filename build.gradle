buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath "gradle.plugin.com.github.johnrengelman:shadow:7.1.2"
    }

    apply from: "https://nachtraben.com/files/commons.gradle"

    ext {
        nexusUser = System.getenv("NEXUS_USR") ?: loadProperty("nexus.nachtraben.user")
        nexusPass = System.getenv("NEXUS_PSW") ?: loadProperty("nexus.nachtraben.pass")
        postgresUser = loadProperty("postgres.dev.armadeus.user")
        postgresPass = loadProperty("postgres.dev.armadeus.pass")
        postgresUrl = loadProperty("postgres.dev.armadeus.url")
    }
}

allprojects {
    apply plugin: 'idea'
    apply plugin: 'java-library'
    apply plugin: 'com.github.johnrengelman.shadow'

    group 'dev.armadeus'
    version GIT_BRANCH

    ext {
        lombokVersion = '1.18.24'
        slf4jVersion = '1.7.36'
        log4jVersion = '2.18.0'
        guavaVersion = '30.1-jre'
        jdaVersion = '5.0.0-alpha.17'
        jdaDevVersion = 'feature~slash-commands-SNAPSHOT'
        groovyVersion = '3.0.12'
    }

    java {
        sourceCompatibility = targetCompatibility = JavaVersion.VERSION_17
    }

    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
        resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
    }

    compileJava {
        options.compilerArgs += ["-parameters"]
        options.fork = true
        options.forkOptions.executable = 'javac'
    }

    compileJava.options.encoding = javadoc.options.encoding = "UTF-8"

    repositories {
        mavenCentral()
        maven {
            name = "NachtRaben-Nexus"
            url = "https://mvn.armadeus.dev/repository/maven-public/"
        }
        // JDA Dependencies
        maven { name 'm2-dv8tion'; url 'https://m2.dv8tion.net/releases' }
        // Aikar Dependencies
        maven { name "Aikar"; url "https://repo.aikar.co/content/groups/aikar/" }
        // Lmbda
        maven { name "Sonatype"; url "https://oss.sonatype.org/content/repositories/snapshots/" }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        archiveName = project.name + '-sources.jar'
        from project.sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        archiveName = rootProject.name + '-javadoc.jar'
        from javadoc.destinationDir
    }

    task copyPluginJar(type: Copy) {
        from shadowJar
        into '../../ArmaCore/run/plugins/'
    }
}

