/*
 * This file is generated by jOOQ.
 */
package dev.armadeus.bot.database.core.tables;


import dev.armadeus.bot.database.core.Keys;
import dev.armadeus.bot.database.core.Public;
import dev.armadeus.bot.database.core.tables.records.InstancesRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Instances extends TableImpl<InstancesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.instances</code>
     */
    public static final Instances INSTANCES = new Instances();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InstancesRecord> getRecordType() {
        return InstancesRecord.class;
    }

    /**
     * The column <code>public.instances.id</code>.
     */
    public final TableField<InstancesRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.instances.dev-mode</code>.
     */
    public final TableField<InstancesRecord, Boolean> DEV_MODE = createField(DSL.name("dev-mode"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.instances.updated</code>.
     */
    public final TableField<InstancesRecord, Long> UPDATED = createField(DSL.name("updated"), SQLDataType.BIGINT, this, "");

    private Instances(Name alias, Table<InstancesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Instances(Name alias, Table<InstancesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.instances</code> table reference
     */
    public Instances(String alias) {
        this(DSL.name(alias), INSTANCES);
    }

    /**
     * Create an aliased <code>public.instances</code> table reference
     */
    public Instances(Name alias) {
        this(alias, INSTANCES);
    }

    /**
     * Create a <code>public.instances</code> table reference
     */
    public Instances() {
        this(DSL.name("instances"), null);
    }

    public <O extends Record> Instances(Table<O> child, ForeignKey<O, InstancesRecord> key) {
        super(child, key, INSTANCES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<InstancesRecord> getPrimaryKey() {
        return Keys.INSTANCES_PKEY;
    }

    @Override
    public List<UniqueKey<InstancesRecord>> getKeys() {
        return Arrays.<UniqueKey<InstancesRecord>>asList(Keys.INSTANCES_PKEY);
    }

    @Override
    public Instances as(String alias) {
        return new Instances(DSL.name(alias), this);
    }

    @Override
    public Instances as(Name alias) {
        return new Instances(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Instances rename(String name) {
        return new Instances(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Instances rename(Name name) {
        return new Instances(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<UUID, Boolean, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
